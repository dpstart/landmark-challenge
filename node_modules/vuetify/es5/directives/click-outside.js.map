{"version":3,"sources":["../../src/directives/click-outside.js"],"names":[],"mappings":";;;;;AAAA,SAAA,gBAAA,GAAA;AACE,WAAO,KAAP;AACD;AAED,SAAA,SAAA,CAAoB,CAApB,EAAuB,EAAvB,EAA2B,OAA3B,EAAkC;AAChC;AACA,YAAQ,IAAR,GAAe,QAAQ,IAAR,IAAgB,EAA/B;AAEA;AACA,QAAM,WAAY,QAAQ,IAAR,CAAa,gBAAb,IAAiC,gBAAnD;AAEA;AACA;AACA;AACA;AACA,QAAI,CAAC,CAAD,IAAM,SAAS,CAAT,MAAgB,KAA1B,EAAiC;AAEjC;AACA;AACA;AACA;AACA;AACA,QAAK,eAAe,CAAf,IAAoB,CAAC,EAAE,SAAxB,IACD,iBAAiB,CAAjB,IAAsB,CAAC,EAAE,WAD5B,EAEE;AAEF;AACA;AACA,QAAM,WAAW,CAAC,QAAQ,IAAR,CAAa,OAAb,IAAyB;AAAA,eAAM,EAAN;AAAA,KAA1B,GAAjB;AACA;AACA,aAAS,IAAT,CAAc,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA,KAAC,aAAa,CAAb,EAAgB,QAAhB,CAAD,IAA8B,WAAW,YAAK;AAC5C,iBAAS,CAAT,KAAe,QAAQ,KAAR,CAAc,CAAd,CAAf;AACD,KAF6B,EAE3B,CAF2B,CAA9B;AAGD;AAED,SAAA,YAAA,CAAuB,CAAvB,EAA0B,QAA1B,EAAkC;AAChC;AADgC,QAEf,CAFe,GAEG,CAFH,CAExB,OAFwB;AAAA,QAEH,CAFG,GAEG,CAFH,CAEZ,OAFY;AAGhC;;AAHgC;AAAA;AAAA;;AAAA;AAIhC,6BAAiB,QAAjB,8HAA2B;AAAA,gBAAhB,EAAgB;;AACzB,gBAAI,YAAY,EAAZ,EAAgB,CAAhB,EAAmB,CAAnB,CAAJ,EAA2B,OAAO,IAAP;AAC5B;AAN+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQhC,WAAO,KAAP;AACD;AAED,SAAA,WAAA,CAAsB,EAAtB,EAA0B,CAA1B,EAA6B,CAA7B,EAA8B;AAC5B;AACA;AACA;AACA,QAAM,IAAI,GAAG,qBAAH,EAAV;AACA;AAEA,WAAO,KAAK,EAAE,IAAP,IAAe,KAAK,EAAE,KAAtB,IAA+B,KAAK,EAAE,GAAtC,IAA6C,KAAK,EAAE,MAA3D;AACD;kBAEc;AACb,UAAM,eADO;AAGb;AACA;AACA;AACA;AACA;AACA,YARa,oBAQH,EARG,EAQC,OARD,EAQQ;AACnB,YAAM,UAAU,SAAV,OAAU;AAAA,mBAAK,UAAU,CAAV,EAAa,EAAb,EAAiB,OAAjB,CAAL;AAAA,SAAhB;AACA;AACA;AACA;AACA,YAAM,MAAM,SAAS,aAAT,CAAuB,YAAvB,KACV,SAAS,IADX,CALmB,CAMH;AAChB,YAAI,gBAAJ,CAAqB,OAArB,EAA8B,OAA9B,EAAuC,IAAvC;AACA,WAAG,aAAH,GAAmB,OAAnB;AACD,KAjBY;AAmBb,UAnBa,kBAmBL,EAnBK,EAmBH;AACR,YAAM,MAAM,SAAS,aAAT,CAAuB,YAAvB,KACV,SAAS,IADX,CADQ,CAEQ;AAChB,eAAO,IAAI,mBAAJ,CAAwB,OAAxB,EAAiC,GAAG,aAApC,EAAmD,IAAnD,CAAP;AACA,eAAO,GAAG,aAAV;AACD;AAxBY,C","sourcesContent":["function closeConditional () {\n  return false\n}\n\nfunction directive (e, el, binding) {\n  // Args may not always be supplied\n  binding.args = binding.args || {}\n\n  // If no closeConditional was supplied assign a default\n  const isActive = (binding.args.closeConditional || closeConditional)\n\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || isActive(e) === false) return\n\n  // If click was triggered programmaticaly (domEl.click()) then\n  // it shouldn't be treated as click-outside\n  // Chrome/Firefox support isTrusted property\n  // IE/Edge support pointerType property (empty if not triggered\n  // by pointing device)\n  if (('isTrusted' in e && !e.isTrusted) ||\n    ('pointerType' in e && !e.pointerType)\n  ) return\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = (binding.args.include || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occure before\n  // the bubbling click event on any outside elements.\n  !clickedInEls(e, elements) && setTimeout(() => {\n    isActive(e) && binding.value(e)\n  }, 0)\n}\n\nfunction clickedInEls (e, elements) {\n  // Get position of click\n  const { clientX: x, clientY: y } = e\n  // Loop over all included elements to see if click was in any of them\n  for (const el of elements) {\n    if (clickedInEl(el, x, y)) return true\n  }\n\n  return false\n}\n\nfunction clickedInEl (el, x, y) {\n  // Get bounding rect for element\n  // (we're in capturing event and we want to check for multiple elements,\n  //  so can't use target.)\n  const b = el.getBoundingClientRect()\n  // Check if the click was in the element's bounding rect\n\n  return x >= b.left && x <= b.right && y >= b.top && y <= b.bottom\n}\n\nexport default {\n  name: 'click-outside',\n\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  inserted (el, binding) {\n    const onClick = e => directive(e, el, binding)\n    // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n    const app = document.querySelector('[data-app]') ||\n      document.body // This is only for unit tests\n    app.addEventListener('click', onClick, true)\n    el._clickOutside = onClick\n  },\n\n  unbind (el) {\n    const app = document.querySelector('[data-app]') ||\n      document.body // This is only for unit tests\n    app && app.removeEventListener('click', el._clickOutside, true)\n    delete el._clickOutside\n  }\n}\n"],"sourceRoot":""}